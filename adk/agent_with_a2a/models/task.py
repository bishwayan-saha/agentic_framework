## This file defines task related models used in A2A protocol

from enum import Enum                          
from uuid import uuid4                         
from pydantic import BaseModel, Field          
from typing import Any, Literal, List          
from datetime import datetime


# Represents one part of a message, currently only plain text is allowed
class TextPart(BaseModel):
    type: Literal["text"] = "text"  # Fixed value field to identify this as a "text" type
    text: str                       # The actual text content (e.g., "What time is it?")

# Alias: For now, "Part" is the same as TextPart (used for easier refactoring in the future)
Part = TextPart

# A message in the context of a task, either from the user or the agent
class Message(BaseModel):
    role: Literal["user", "agent"] 
    parts: List[Part]


# TaskStatus: Describes the state of a task at a given moment
class TaskStatus(BaseModel):
    state: str
    # Automatically captures the time when the status is recorded
    timestamp: datetime = Field(default_factory=datetime.now)


# Task: The core unit of work in the Agent2Agent protocol
class Task(BaseModel):
    id: str                    # A unique identifier for this task (can be generated by client or agent)
    status: TaskStatus         # The current state of the task
    history: List[Message]     # Conversation history for the task (what the user said, how the agent replied)


# -----------------------------------------------------------------------------
# Parameter Models for API Requests
# -----------------------------------------------------------------------------

# Used to identify a task, e.g., when canceling or querying
class TaskIdParams(BaseModel):
    id: str                                # The task ID
    metadata: dict[str, Any] | None = None # Optional metadata for additional context (e.g., who submitted it)


# Extends TaskIdParams to include optional history length
# Useful when querying a task and controlling how much of the past you want back
class TaskQueryParams(TaskIdParams):
    historyLength: int | None = None       # Limit the number of messages returned in the task's history


# Parameters required to send a new task to an agent
class TaskSendParams(BaseModel):
    id: str                                # Task ID (usually generated client-side)
    
    # Session ID used to group related tasks (autogenerated if not provided)
    session_id: str = Field(default_factory=lambda: uuid4().hex)

    message: Message                       # The message that initiates the task
    historyLength: int | None = None       # Optional history length to return
    metadata: dict[str, Any] | None = None # Optional extra info (e.g., user role, priority)


# -----------------------------------------------------------------------------
# TaskState: Enum for predefined task lifecycle states
# -----------------------------------------------------------------------------

# Enum gives you a controlled vocabulary for task states
class TaskState(str, Enum):
    SUBMITTED = "submitted"              # Task has been received
    WORKING = "working"                  # Task is in progress
    INPUT_REQUIRED = "input-required"    # Agent is waiting for more input
    COMPLETED = "completed"             # Task is done
    CANCELED = "canceled"               # Task was canceled by user or system
    FAILED = "failed"                   # Something went wrong
    UNKNOWN = "unknown"     
    